// <auto-generated />
using CosmicMixer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CosmicMixer.Migrations
{
    [DbContext(typeof(SiteDbContext))]
    partial class SiteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CosmicMixer.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Surname")
                        .HasMaxLength(100);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("CosmicMixer.Entities.AuthorTag", b =>
                {
                    b.Property<int>("AuthorId");

                    b.Property<int>("TagId");

                    b.HasKey("AuthorId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("AuthorTag");
                });

            modelBuilder.Entity("CosmicMixer.Entities.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TagId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("CosmicMixer.Entities.SeriesAuthor", b =>
                {
                    b.Property<int>("SeriesId");

                    b.Property<int>("AuthorId");

                    b.HasKey("SeriesId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("SeriesAuthor");
                });

            modelBuilder.Entity("CosmicMixer.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CosmicMixer.Entities.Tile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("Edited");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Published");

                    b.Property<int?>("TagId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UrlContent")
                        .IsRequired();

                    b.Property<string>("UrlImage")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TagId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("UrlContent")
                        .IsUnique();

                    b.ToTable("Tiles");
                });

            modelBuilder.Entity("CosmicMixer.Entities.TileSeries", b =>
                {
                    b.Property<int>("TileId");

                    b.Property<int>("SeriesId");

                    b.HasKey("TileId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("TileSeries");
                });

            modelBuilder.Entity("CosmicMixer.Entities.TileTag", b =>
                {
                    b.Property<int>("TileId");

                    b.Property<int>("TagId");

                    b.HasKey("TileId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TileTag");
                });

            modelBuilder.Entity("CosmicMixer.Entities.AuthorTag", b =>
                {
                    b.HasOne("CosmicMixer.Entities.Author", "Author")
                        .WithMany("AuthorTags")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CosmicMixer.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CosmicMixer.Entities.Series", b =>
                {
                    b.HasOne("CosmicMixer.Entities.Tag")
                        .WithMany("Series")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("CosmicMixer.Entities.SeriesAuthor", b =>
                {
                    b.HasOne("CosmicMixer.Entities.Author", "Author")
                        .WithMany("SeriesAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CosmicMixer.Entities.Series", "Series")
                        .WithMany("SeriesAuthors")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CosmicMixer.Entities.Tile", b =>
                {
                    b.HasOne("CosmicMixer.Entities.Author", "Author")
                        .WithMany("Tiles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CosmicMixer.Entities.Tag")
                        .WithMany("Tiles")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("CosmicMixer.Entities.TileSeries", b =>
                {
                    b.HasOne("CosmicMixer.Entities.Series", "Series")
                        .WithMany("TileSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CosmicMixer.Entities.Tile", "Tile")
                        .WithMany("TileSeries")
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CosmicMixer.Entities.TileTag", b =>
                {
                    b.HasOne("CosmicMixer.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CosmicMixer.Entities.Tile", "Tile")
                        .WithMany("TileTags")
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
